# Testing and Packaging Instructions

# This guide explains how to set up testing and packaging for the bikeshare model project.

## Project Structure Updates

# First, create a `tests` directory at the same level as the `bikeshare_model` directory:

'''bash
mkdir -p tests
'''

## Setting Up Testing Files

#1. Copy the test files to the `tests` directory:

'''bash
# Create the test files in the tests directory
cp conftest.py tests/
cp test_features.py tests/
cp test_predictions.py tests/
'''

#2. Add the test requirements:

'''bash
# Copy the test requirements file
cp test_requirements.txt .
'''

#3. Create packaging files in the root directory:

'''bash
# Copy packaging files
cp pyproject.toml .
cp setup.py .
cp MANIFEST.in .
cp mypy.ini .
cp README.md .
'''

## Running Tests

#To run the tests:

#1. Install the test requirements:

'''bash
pip install -r test_requirements.txt
'''

#2. Run pytest:

'''bash
pytest
'''

#3. For more detailed output:

'''bash
pytest -v
'''

#4. To generate a coverage report:

'''bash
pytest --cov=bikeshare_model
'''

## Building the Package

#To build the package:

#1. Install the build package:

'''bash
pip install build
'''

#2. Build the package:

'''bash
python -m build
'''
'''
This will create two distribution files in the `dist` directory:
- A source distribution (.tar.gz file)
- A wheel distribution (.whl file)
'''
## Installing the Built Package

#To install the built package:

'''bash
pip install dist/bikeshare_model-0.1.0-py3-none-any.whl
'''

## Troubleshooting
'''
If you encounter issues:

1. Make sure all files are in the correct locations
2. Check that your virtual environment is activated
3. Verify that all required packages are installed
4. Ensure that the VERSION file exists in the bikeshare_model directory
5. Make sure the tests can find the bikeshare_model package:
'''
'''bash
# If needed, add the project root to PYTHONPATH
export PYTHONPATH=$PYTHONPATH:$(pwd)  # Linux/macOS
set PYTHONPATH=%PYTHONPATH%;%cd%      # Windows
'''

## Common Issues and Solutions
'''
1. **Tests can't find the module:**
   - Ensure your package is installed in development mode: `pip install -e .`
   - Check your import statements in tests

2. **Build fails:**
   - Make sure you have all required files (VERSION, README.md, etc.)
   - Check your MANIFEST.in file

3. **Packaging errors:**
   - Make sure setup.py has the correct path to VERSION and other files
   - Verify that pyproject.toml has the correct build settings
'''